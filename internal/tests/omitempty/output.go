// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package omitempty

import (
	"encoding/json"
	"errors"
)

func (x X) MarshalJSON() ([]byte, error) {
	type XJSON struct {
		Int replacedInt `json:",omitempty"`
	}
	var enc XJSON
	enc.Int = replacedInt(x.Int)
	return json.Marshal(&enc)
}

func (x *X) UnmarshalJSON(input []byte) error {
	type XJSON struct {
		Int *replacedInt `json:",omitempty"`
	}
	var dec XJSON
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	var x0 X
	if dec.Int == nil {
		return errors.New("missing required field 'int' for X")
	}
	x0.Int = int(*dec.Int)
	*x = x0
	return nil
}

func (x X) MarshalYAML() (interface{}, error) {
	type XYAML struct {
		Int replacedInt `json:",omitempty"`
	}
	var enc XYAML
	enc.Int = replacedInt(x.Int)
	return &enc, nil
}

func (x *X) UnmarshalYAML(unmarshal func(interface{}) error) error {
	type XYAML struct {
		Int *replacedInt `json:",omitempty"`
	}
	var dec XYAML
	if err := unmarshal(&dec); err != nil {
		return err
	}
	var x0 X
	if dec.Int == nil {
		return errors.New("missing required field 'int' for X")
	}
	x0.Int = int(*dec.Int)
	*x = x0
	return nil
}
