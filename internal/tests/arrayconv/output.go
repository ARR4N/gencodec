// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package arrayconv

import (
	"encoding/json"
	"errors"
)

var _ = (*Xo)(nil)

// MarshalJSON marshals as JSON.
func (x X) MarshalJSON() ([]byte, error) {
	type X struct {
		A         []int
		RequiredA []int `gencodec:"required"`
	}
	var enc X
	enc.A = x.A[:]
	enc.RequiredA = x.RequiredA[:]
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (x *X) UnmarshalJSON(input []byte) error {
	type X struct {
		A         []int
		RequiredA []int `gencodec:"required"`
	}
	var dec X
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.A != nil {
		if len(dec.A) != len(x.A) {
			return errors.New("field 'a' has wrong length, need 32 items")
		}
		for k, v := range dec.A {
			x.A[k] = v
		}
	}
	if dec.RequiredA == nil {
		return errors.New("missing required field 'requiredA' for X")
	}
	if len(dec.RequiredA) != len(x.RequiredA) {
		return errors.New("field 'requiredA' has wrong length, need 32 items")
	}
	for k, v := range dec.RequiredA {
		x.RequiredA[k] = v
	}
	return nil
}
